snippet mod
	module ${1:module} where

	${2}

snippet main
	main = do
		${1:IO}

snippet imp
	import ${1:module}

snippet if
	if ${1:condition} then ${2:expression1} else ${3:expression2}

snippet data
	data ${1:type_const} = ${1} ${2:component}

snippet cl
	class ${1:classname} a where
		${2:code}

snippet ins
	instance ${1:classname} ${2:type} where
		${3:function} ${4:arg} = ${5:code}

snippet type
	type ${1:type} = ${2:code}

snippet let
	let ${1:var} = ${2:expression}

snippet ::
	${1:func} :: ${2:type}
	$1 ${3:arg} = ${4:code}

snippet =>
	=> ${1:input} -> ${2:output}
	
snippet %%
	-> ${1:output}

snippet new
	newtype ${1:type} = ${2}

snippet case
	case ${1:arg} of
		${2:expression}
	
